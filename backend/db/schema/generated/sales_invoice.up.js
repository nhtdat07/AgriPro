import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import pkg from 'pg';
const { Pool } = pkg;
const pool = new Pool({ connectionString: process.env.DATABASE_URL });

/**
 * Executes the 'createTableSalesInvoice' query.
 * @param {Object} params - Parameters for the query.
 * @returns {Promise<Array>} - Query result rows.
 */
export async function createTableSalesInvoice(params = {}) {
    try {
        const query = `CREATE TABLE IF NOT EXISTS sales_invoice (
  "auto_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "id" char(6) UNIQUE NOT NULL,
  "agency_id" char(6) NOT NULL,
  "recorded_at" timestamp NOT NULL DEFAULT current_timestamp,
  "customer_id" char(6) NOT NULL,
  "total_payment" int NOT NULL DEFAULT 0
);

CREATE TABLE IF NOT EXISTS invoice_product (
  "agency_id" char(6) NOT NULL,
  "invoice_id" char(6) NOT NULL,
  "product_id" char(6),
  "quantity" int NOT NULL,
  "price" int NOT NULL,
  PRIMARY KEY ("agency_id", "invoice_id", "product_id")
);

CREATE OR REPLACE FUNCTION set_custom_sales_invoice_id()
RETURNS TRIGGER AS $$
BEGIN
    NEW.id := 'SI' || LPAD(NEW.auto_id::text, 4, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE TRIGGER set_sales_invoice_id
BEFORE INSERT ON sales_invoice
FOR EACH ROW
EXECUTE FUNCTION set_custom_sales_invoice_id();`;
        const { rows } = await pool.query(query, Object.values(params));
        return rows;
    } catch (error) {
        console.error('Error executing createTableSalesInvoice:', error);
        throw error;
    }
}

