/**
 * Executes the 'createTableProduct' query.
 * @param {Object} params - Parameters for the query.
 * @returns {Promise<Array>} - Query result rows.
 */
export async function createTableProduct(pool, params = {}) {
    try {
        const query = `DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'product_type') THEN
        CREATE TYPE "product_type" AS ENUM (
          'HẠT GIỐNG - CÂY TRỒNG',
          'PHÂN BÓN - ĐẤT TRỒNG',
          'THUỐC BẢO VỆ THỰC VẬT',
          'NÔNG CỤ',
          'GIA SÚC - GIA CẦM'
        );
    END IF;
END $$;

CREATE TABLE IF NOT EXISTS product (
  "auto_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "id" char(6) UNIQUE NOT NULL,
  "agency_id" char(6) NOT NULL,
  "name" varchar(100) NOT NULL,
  "image_path" varchar(100),
  "brand" varchar(100) NOT NULL,
  "category" product_type NOT NULL,
  "out_price" integer NOT NULL,
  "production_place" varchar(100) NOT NULL,
  "usages" text NOT NULL,
  "guidelines" text NOT NULL,
  "is_deleted" bool NOT NULL DEFAULT false
);

CREATE OR REPLACE FUNCTION set_custom_product_id()
RETURNS TRIGGER AS $$
BEGIN
    NEW.id := 'PR' || LPAD(NEW.auto_id::text, 4, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE TRIGGER set_product_id
BEFORE INSERT ON product
FOR EACH ROW
EXECUTE FUNCTION set_custom_product_id();`;
        const { rows } = await pool.query(query, Object.values(params));
        return rows;
    } catch (error) {
        throw error;
    }
}

